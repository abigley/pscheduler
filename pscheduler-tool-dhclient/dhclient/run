#!/usr/bin/env python3
#
#
# Development Order #5:
#
# This is the meat and bones of the tool, where the actual desired
# commands or operation will be run. The results are then recorded
# and added to the 'results' JSON data, which will then be sent
# back to the test. Both system and api are able to be used here.
#

import datetime
import subprocess as sp
import json
import sys
import time
import netifaces
import pscheduler


# from stdin
input = pscheduler.json_load(exit_on_error=True)
# Take input from test spec
try:
    interface = input['test']['spec']['interface']
except KeyError:
    interface = ""

# timeout_iso = input['test']['spec'].get('timeout', 'PT10S')
# timeout = pscheduler.timedelta_as_seconds( pscheduler.iso8601_as_timedelta(timeout_iso) )
succeeded = False
error = ''
diags = []


# IMPORTANT NOTE: This code puts the process to sleep until the
# scheduled start time has arrived.  It should be placed after all
# preparatory code has been executed and immediately before the tool
# is invoked (for plugins that run other programs) or any activity
# that does a measurement (for those that don't).

try:
    pscheduler.sleep_until(input['schedule']['start'])
except KeyError:
    pass
    pscheduler.fail("Unable to find start time in input")

start_release = datetime.datetime.now()
dhclient_release_args = ['sudo', 'dhclient', '-r', '-v', '-1', '-d', interface]

diags.append(' '.join(dhclient_release_args))
status, stdout, stderr = pscheduler.run_program(dhclient_release_args, timeout=datetime.timedelta(seconds=20))
print('status:', status, 'stdout:', stdout, 'stderr:', stderr)
if status != 0:
    pscheduler.fail("Unable to release current DHCP lease.")
diags.append(stderr)

dhclient_args = ['sudo', 'dhclient', '-v', '-1', '-d',  interface]
diags.append(' '.join(dhclient_args))
time_left = datetime.timedelta(seconds=20) - (datetime.datetime.now() - start_release)
start_time = datetime.datetime.now()
status, stdout, stderr = pscheduler.run_program(dhclient_args, timeout=time_left)
end_time = datetime.datetime.now()
# print('status:', status, 'stdout:', stdout, 'stderr:', stderr)
if status == 0:
    succeeded = True
    # get ip address
    try:
        netifaces.ifaddresses(interface)
        ip_addr = netifaces.ifaddresses(interface)[netifaces.AF_INET][0]['addr']
    except:
        ip_addr = 'Unable to fetch IP address'
diags.append(stderr)
# Organize results into json data

results = {
    'succeeded': succeeded,
    'result': {
        'schema': 1,
	    'suceeded': suceeded,
        'time': pscheduler.timedelta_as_iso8601( end_time - start_time),
	'ip_address': ip_addr
    },
    'error': error,
    'diags': diags }

pscheduler.succeed_json(results)


